{
  "info": {
    "description": "API Gotham",
    "title": "Gotham API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/admin/protected/tasks": {
      "get": {
        "parameters": [],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "GetTasks retorna uma lista de tarefas fictícias\n@Summary Retorna uma lista de tarefas\n@Description Obtém uma lista de tarefas fictícias para a demonstração\n@Security BearerAuth\n@Produce  json\n@Success 200 {array} map[string]string \"Lista de tarefas\"\n@Router /protected/tasks [get]"
      }
    },
    "/admin/users/{id:[0-9]+}": {
      "delete": {
        "parameters": [
          {
            "description": "Path parameter: id:[0-9]+",
            "in": "path",
            "name": "id:[0-9]+",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "DeleteUser remove um usuário pelo ID\n@Summary Remove um usuário pelo ID\n@Description Exclui um usuário com base no ID fornecido\n@Security BearerAuth\n@Param id path int true \"ID do usuário\"\n@Success 200 {object} map[string]string \"Usuário excluído com sucesso\"\n@Failure 400 {string} string \"ID inválido\"\n@Failure 500 {string} string \"Erro ao excluir usuário\"\n@Router /admin/users/{id} [delete]"
      },
      "put": {
        "parameters": [
          {
            "description": "Path parameter: id:[0-9]+",
            "in": "path",
            "name": "id:[0-9]+",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "UpdateUser atualiza as informações de um usuário\n@Summary Atualiza as informações de um usuário\n@Description Atualiza os dados de um usuário com base no ID fornecido\n@Accept  json\n@Security BearerAuth\n@Produce  json\n@Param id path int true \"ID do usuário\"\n@Param user body models.User true \"Dados do usuário a serem atualizados\"\n@Success 200 {object} models.User \"Usuário atualizado com sucesso\"\n@Failure 400 {string} string \"ID ou dados inválidos\"\n@Failure 404 {string} string \"Usuário não encontrado\"\n@Failure 500 {string} string \"Erro ao atualizar usuário\"\n@Router /admin/users/{id} [put]"
      }
    },
    "/login": {
      "post": {
        "parameters": [],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Login autentica o usuário e gera um token JWT\n@Summary Login do usuário\n@Description Autentica o usuário e gera um token JWT\n@Accept  json\n@Produce  json\n@Param loginRequest body models.LoginRequest true \"Credenciais do usuário\"\n@Success 200 {object} map[string]string \"Token gerado\"\n@Failure 400 {string} string \"Dados inválidos\"\n@Failure 401 {string} string \"Usuário não encontrado ou senha incorreta\"\n@Router /login [post]"
      }
    },
    "/users": {
      "get": {
        "parameters": [],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "GetUsers retorna todos os usuários cadastrados com paginação\n@Summary Retorna todos os usuários com paginação\n@Description Obtém uma lista de todos os usuários cadastrados no sistema com base na paginação\n@Produce  json\n@Param page query int false \"Número da página\" default(1)\n@Param limit query int false \"Limite de usuários por página\" default(10)\n@Success 200 {object} utils.PaginatedResponse \"Lista de usuários com paginação\"\n@Failure 500 {string} string \"Erro ao buscar usuários\"\n@Router /users [get]"
      },
      "post": {
        "parameters": [],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "CreateUser cria um novo usuário\n@Summary Cria um novo usuário\n@Description Cria um novo usuário no sistema com os dados fornecidos\n@Accept  json\n@Produce  json\n@Param user body models.User true \"Dados do novo usuário\"\n@Success 201 {object} models.User \"Usuário criado com sucesso\"\n@Failure 400 {string} string \"Dados inválidos\"\n@Failure 500 {string} string \"Erro ao criar usuário\"\n@Router /users [post]"
      }
    },
    "/users/{id:[0-9]+}": {
      "get": {
        "parameters": [
          {
            "description": "Path parameter: id:[0-9]+",
            "in": "path",
            "name": "id:[0-9]+",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": null,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "GetUser retorna um usuário pelo ID\n@Summary Retorna um usuário pelo ID\n@Description Obtém um usuário específico com base no ID fornecido\n@Produce  json\n@Param id path int true \"ID do usuário\"\n@Success 200 {object} models.User \"Usuário encontrado\"\n@Failure 400 {string} string \"ID inválido\"\n@Failure 404 {string} string \"Usuário não encontrado\"\n@Router /users/{id} [get]"
      }
    }
  }
}